<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on Louise Grandjonc, Python/SQL developer but also a human</title>
    <link>http://www.louisemeta.com/drafts/</link>
    <description>Recent content in Drafts on Louise Grandjonc, Python/SQL developer but also a human</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 22 Jun 2018 10:20:21 -0700</lastBuildDate>
    
	<atom:link href="http://www.louisemeta.com/drafts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL&#39;s indexes - BTrees internal data structure</title>
      <link>http://www.louisemeta.com/drafts/indexes-btree/</link>
      <pubDate>Fri, 22 Jun 2018 10:20:21 -0700</pubDate>
      
      <guid>http://www.louisemeta.com/drafts/indexes-btree/</guid>
      <description>Introduction BTree is the index type used by default on CREATE INDEX. As I said in the introduction to indexes article, BTrees are also created automatically for primary key and unique constraints.
Before I start going into the internal structure of BTree, I&amp;rsquo;d like to talk to you about a tiny python library to have a graphical representation of what&amp;rsquo;s going on inside PostgreSQL&amp;rsquo;s BTrees.
You pass your index to a command line and it generates a HTML allowing you to explore pages and items of your index.</description>
    </item>
    
    <item>
      <title>Introduction to PostgreSQL&#39;s indexes</title>
      <link>http://www.louisemeta.com/drafts/intro-to-indexes/</link>
      <pubDate>Thu, 21 Jun 2018 10:20:21 -0700</pubDate>
      
      <guid>http://www.louisemeta.com/drafts/intro-to-indexes/</guid>
      <description>Introduction When I understand what&amp;rsquo;s happening precisely in my database, it helps me make smarter choices. It&amp;rsquo;s why I focused on EXPLAIN and the algorithms used as you can read here. Because to me it was the best way to understand why things were not working like expected.
And I believe that when it comes to indexes, it&amp;rsquo;s the same. Of course you could use your ORM to add an index on a column you kind of randomly picked, but there&amp;rsquo;s a smarter way&amp;hellip;</description>
    </item>
    
  </channel>
</rss>